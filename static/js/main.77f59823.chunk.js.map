{"version":3,"sources":["constants.jsx","reducers/searchReducer.jsx","reducers/fetchRobotsReducer.jsx","reducers/index.jsx","components/cards/Card.jsx","components/cards/CardList.jsx","components/SearchBox.jsx","components/Spinner.jsx","action.jsx","utilities.js","components/Header.jsx","containers/App.jsx","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["SEARCH_ROBOT","FETCH_ROBOTS_PENDING","FETCH_ROBOTS_SUCCESS","FETCH_ROBOTS_FAILED","initialState","search","isPending","robots","error","combineReducers","searchCombined","state","action","type","payload","robotsCombined","Card","id","name","email","className","src","alt","width","height","CardList","map","robot","SearchBox","placeholder","onChange","React","memo","Spinner","fetchRobots","dispatch","axios","then","data","catch","Header","connect","onSearchChange","event","text","target","value","toLowerCase","fetchRobotsList","useEffect","filteredRobots","filter","includes","fallback","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.77f59823.chunk.js","sourcesContent":["export const SEARCH_ROBOT = 'SEARCH_ROBOT';\r\n\r\nexport const FETCH_ROBOTS_PENDING = 'FETCH_ROBOTS_PENDING';\r\nexport const FETCH_ROBOTS_SUCCESS = 'FETCH_ROBOTS_SUCCESS';\r\nexport const FETCH_ROBOTS_FAILED = 'FETCH_ROBOTS_FAILED';\r\n","import { \n  SEARCH_ROBOT\n} from '../constants';\n\nconst initialState = {\n  search: '',\n};\n\nexport const searchReducer = (state = initialState, action = {}) => {\n  switch (action.type) {\n    case SEARCH_ROBOT:\n      return { ...state, search: action.payload };\n    default:\n      return state;\n  }\n};","import { \n  FETCH_ROBOTS_PENDING,\n  FETCH_ROBOTS_SUCCESS,\n  FETCH_ROBOTS_FAILED\n} from '../constants';\n\nconst initialState = {\n  isPending: false,\n  robots: [],\n  error: ''\n};\n\nexport const fetchRobotsReducer = (state = initialState, action = {}) => {\n  switch (action.type) {\n    case FETCH_ROBOTS_PENDING:\n      return { ...state, isPending: true }\n    case FETCH_ROBOTS_SUCCESS:\n      return  { ...state, isPending: false, robots: action.payload }\n    case FETCH_ROBOTS_FAILED:\n      return { ...state, isPending: false, error: action.payload }\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\r\nimport { searchReducer } from './searchReducer';\r\nimport { fetchRobotsReducer } from './fetchRobotsReducer';\r\n\r\nexport default combineReducers({\r\n  searchCombined: searchReducer,\r\n  robotsCombined: fetchRobotsReducer\r\n})","const Card = ({id, name, email }) => {\n  return (\n    <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n      <img src={`https://robohash.org/${id}?size=200x200`} alt=\"robots\" width=\"200\" height=\"200\"/>\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import Card from './Card';\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {robots.map(robot => <Card key={robot.id} { ...robot } />)}\n    </div>\n  );\n};\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ search }) => {\r\n\r\n  return (\r\n    <div className='pa2'>\r\n      <input aria-label='Search a robot'\r\n             className='pa3 ba b--green bg-lightest-blue' \r\n             type='search' \r\n             placeholder='Search a robot' \r\n             onChange={search}\r\n      />\r\n    </div>\r\n  );\r\n};\r\nexport default React.memo(SearchBox);\r\n","import './Spinner.css'\r\n\r\nconst Spinner = () => {\r\n  return (\r\n    <div className=\"loader\">\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Spinner;\r\n","import { \n  SEARCH_ROBOT,\n  FETCH_ROBOTS_PENDING,\n  FETCH_ROBOTS_SUCCESS,\n  FETCH_ROBOTS_FAILED\n} from './constants'\nimport { fetchRobotsList } from './utilities'\n\nexport const setSearchRobot = text => ({\n  type: SEARCH_ROBOT,\n  payload: text\n})\n\nexport const fetchRobots = dispatch => {\n  dispatch({ type: FETCH_ROBOTS_PENDING });\n\n  fetchRobotsList()\n    .then(({ data }) => dispatch({ type: FETCH_ROBOTS_SUCCESS, payload: data }))\n    .catch(error => dispatch({ type: FETCH_ROBOTS_FAILED, payload: error }));\n}\n\n\n","import axios from 'axios';\r\n\r\nexport const fetchRobotsList = () => {\r\n    return axios('https://jsonplaceholder.typicode.com/users')\r\n};","import React from 'react';\r\n\r\nconst Header = () => {\r\n  return (\r\n    <div>\r\n      <h1>RoboFriends</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(Header);\r\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/cards/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Spinner from '../components/Spinner';\nimport { Suspense } from 'react';\nimport './App.css';\nimport { fetchRobots, setSearchRobot } from '../action';\nimport Header from '../components/Header'\n\nconst App = ({ robots, fetchRobotsList, isPending, search, onSearchChange }) => {\n  useEffect(() => {\n    fetchRobotsList()\n  }, []);\n  \n  const filteredRobots = robots.filter(({ name }) =>\n      name.toLowerCase().includes(search))\n  \n  return (\n    <Suspense fallback={Spinner}>\n      <div className=\"tc\">\n        <Header />\n        <SearchBox search={onSearchChange} />\n        { isPending ? <Spinner /> : <CardList robots={filteredRobots} /> }\n      </div>\n    </Suspense>\n  );\n};\n\n  const mapStateToProps = state => ({\n      search: state.searchCombined.search,\n      robots: state.robotsCombined.robots,\n      isPending: state.robotsCombined.isPending,\n      error: state.robotsCombined.error\n    \n  })\n\n  const mapDispatchToProps = dispatch => ({\n    onSearchChange: event => \n      dispatch(setSearchRobot(event.target.value.toLowerCase())),\n    fetchRobotsList: () => dispatch(fetchRobots)\n  })\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport { applyMiddleware, createStore } from 'redux';\nimport thunk from 'redux-thunk'\nimport rootReducer from './reducers';\nimport App from './containers/App.jsx'\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport './index.css';\nimport 'tachyons';\n\nconst store = createStore(rootReducer, applyMiddleware(thunk))\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={ store } >\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}